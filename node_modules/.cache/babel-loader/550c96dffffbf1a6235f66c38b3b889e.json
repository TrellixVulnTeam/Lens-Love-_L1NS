{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\OneDrive\\\\Desktop\\\\Task-2-Ecommerce\\\\src\\\\components\\\\stripe-button\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { connect } from 'react-redux';\nimport emailjs from 'emailjs-com';\nimport Checkout from '../Checkout';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectCartItems, selectCartTotal, selectCartItemsCount } from './../../redux/Cart/cart.selectors';\nimport { createStructuredSelector } from 'reselect';\nimport { clearCart } from './../../redux/Cart/cart.actions';\nimport { saveOrderHistory } from './../../redux/Orders/orders.actions';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntoast.configure(); // const mapState = ({ user }) => ({\n//   currentUser: user.currentUser\n// })\n\nconst mapState = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal,\n  itemCount: selectCartItemsCount\n});\n\nconst StripeCheckoutButton = props => {\n  _s();\n\n  const {\n    cartItems,\n    total,\n    itemCount\n  } = useSelector(mapState);\n  const dispatch = useDispatch();\n  const configOrder = {\n    orderTotal: total,\n    orderItems: cartItems.map(item => {\n      const {\n        documentID,\n        productThumbnail,\n        productName,\n        productPrice,\n        quantity\n      } = item;\n      return {\n        documentID,\n        productThumbnail,\n        productName,\n        productPrice,\n        quantity\n      };\n    })\n  }; // const sendMail=(e)=>{\n  //   emailjs.sendForm('service_xnzrgv2','template_6poiomb',\"user_vZEPRIeB2GfTHO8K2KJjb\").then(res=>{\n  //     console.log(res);\n  //   }).catch(err=>console.log(err))\n  // }\n  // const { currentUser } = useSelector(mapState);\n  // const { email } = currentUser;\n  // const dispatch = useDispatch()\n\n  const history = useHistory();\n\n  const notify = () => {\n    toast.success('Order Succesfull');\n  }; //  const priceForStripe = price * 100;\n\n\n  const publishableKey = 'pk_test_KzWXSJxJu3foClpqvGjmUlnp00c4Xcfgbb';\n\n  const onToken = token => {\n    history.push('/dashboard');\n    dispatch(clearCart()); // dispatch(sendMail(email))\n\n    dispatch(saveOrderHistory(configOrder));\n    dispatch(notify());\n  }; //  const mapState = createStructuredSelector({\n  //     cartItems: selectCartItems,\n  //     total: selectCartTotal\n  //   });\n\n\n  return /*#__PURE__*/_jsxDEV(StripeCheckout, {\n    label: \"Pay with \\uD83D\\uDCB3\",\n    name: \"FoodStore Ltd.\",\n    billingAddress: true,\n    shippingAddress: true,\n    image: \"https://scontent-tir2-1.xx.fbcdn.net/v/t1.6435-9/171289109_121223046724368_981274772739343386_n.jpg?_nc_cat=101&ccb=1-5&_nc_sid=973b4a&_nc_ohc=481g9-mrx4oAX-lWjiN&_nc_ht=scontent-tir2-1.xx&oh=da8c8805bf5288f037923ab30546a366&oe=61BF5982\",\n    description: `Secure Payment with Stripe`,\n    panelLabel: \"Pay now\" //  amount={priceForStripe}\n    ,\n    token: onToken,\n    stripeKey: publishableKey\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 6\n  }, this);\n}; //  const mapDispatchToProps = dispatch => ({\n//    resetCart: () => dispatch(resetCartAction()),\n//    push: route => dispatch(push(route))\n//  });\n\n\n_s(StripeCheckoutButton, \"uWlh20HlFnPGBOet0bjRB/X6daU=\", false, function () {\n  return [useSelector, useDispatch, useHistory];\n});\n\n_c = StripeCheckoutButton;\nexport default StripeCheckoutButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckoutButton\");","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Desktop/Task-2-Ecommerce/src/components/stripe-button/index.js"],"names":["React","StripeCheckout","connect","emailjs","Checkout","useHistory","useSelector","useDispatch","selectCartItems","selectCartTotal","selectCartItemsCount","createStructuredSelector","clearCart","saveOrderHistory","toast","configure","mapState","cartItems","total","itemCount","StripeCheckoutButton","props","dispatch","configOrder","orderTotal","orderItems","map","item","documentID","productThumbnail","productName","productPrice","quantity","history","notify","success","publishableKey","onToken","token","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,WAAT,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAASC,eAAT,EAA0BC,eAA1B,EAA0CC,oBAA1C,QAAsE,mCAAtE;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAAQC,SAAR,QAAwB,iCAAxB;AACA,SAAQC,gBAAR,QAA+B,qCAA/B;AACA,SAAQC,KAAR,QAAoB,gBAApB;AACA,OAAO,uCAAP;;AAIAA,KAAK,CAACC,SAAN,G,CACA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAGL,wBAAwB,CAAC;AACxCM,EAAAA,SAAS,EAAET,eAD6B;AAExCU,EAAAA,KAAK,EAAET,eAFiC;AAGxCU,EAAAA,SAAS,EAAET;AAH6B,CAAD,CAAzC;;AAOA,MAAMU,oBAAoB,GAAIC,KAAD,IAAW;AAAA;;AAEtC,QAAM;AAAEJ,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAAkCb,WAAW,CAACU,QAAD,CAAnD;AAEA,QAAMM,QAAQ,GAAGf,WAAW,EAA5B;AACA,QAAMgB,WAAW,GAAC;AAChBC,IAAAA,UAAU,EAACN,KADK;AAEhBO,IAAAA,UAAU,EAAER,SAAS,CAACS,GAAV,CAAcC,IAAI,IAAI;AAChC,YAAM;AAAEC,QAAAA,UAAF;AAAcC,QAAAA,gBAAd;AAAgCC,QAAAA,WAAhC;AACJC,QAAAA,YADI;AACUC,QAAAA;AADV,UACuBL,IAD7B;AAGE,aAAO;AACLC,QAAAA,UADK;AAELC,QAAAA,gBAFK;AAGLC,QAAAA,WAHK;AAILC,QAAAA,YAJK;AAKLC,QAAAA;AALK,OAAP;AAOD,KAXS;AAFI,GAAlB,CALsC,CA0BtC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,QAAMC,OAAO,GAAG5B,UAAU,EAA1B;;AACA,QAAM6B,MAAM,GAAE,MAAI;AAChBpB,IAAAA,KAAK,CAACqB,OAAN,CAAc,kBAAd;AACD,GAFD,CApCsC,CAwCtC;;;AACC,QAAMC,cAAc,GAAG,4CAAvB;;AAEA,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACxBL,IAAAA,OAAO,CAACM,IAAR,CAAa,YAAb;AACAjB,IAAAA,QAAQ,CAACV,SAAS,EAAV,CAAR,CAFwB,CAGxB;;AACAU,IAAAA,QAAQ,CAACT,gBAAgB,CAACU,WAAD,CAAjB,CAAR;AACAD,IAAAA,QAAQ,CAACY,MAAM,EAAP,CAAR;AAEA,GAPD,CA3CqC,CAmDtC;AACA;AACA;AACA;;;AAEC,sBAEE,QAAC,cAAD;AACE,IAAA,KAAK,EAAC,uBADR;AAEE,IAAA,IAAI,EAAC,gBAFP;AAIE,IAAA,cAAc,MAJhB;AAKE,IAAA,eAAe,MALjB;AAMC,IAAA,KAAK,EAAC,8OANP;AAOE,IAAA,WAAW,EAAG,4BAPhB;AAQE,IAAA,UAAU,EAAC,SARb,CASC;AATD;AAUE,IAAA,KAAK,EAAEG,OAVT;AAWE,IAAA,SAAS,EAAED;AAXb;AAAA;AAAA;AAAA;AAAA,UAFF;AAmBD,CA3EF,C,CA6EA;AACA;AACA;AACA;;;GAhFMhB,oB;UAEoCd,W,EAEvBC,W,EA+BDF,U;;;KAnCZe,oB;AAkFL,eAAgBA,oBAAhB","sourcesContent":["import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport { connect } from 'react-redux';\nimport emailjs from 'emailjs-com'\nimport Checkout from '../Checkout';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector,useDispatch } from 'react-redux';\nimport { selectCartItems, selectCartTotal,selectCartItemsCount } from './../../redux/Cart/cart.selectors'\nimport { createStructuredSelector } from 'reselect';\nimport {clearCart} from './../../redux/Cart/cart.actions'\nimport {saveOrderHistory} from './../../redux/Orders/orders.actions'\nimport {toast} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\n\n\n\ntoast.configure()\n// const mapState = ({ user }) => ({\n//   currentUser: user.currentUser\n// })\nconst mapState = createStructuredSelector({\n  cartItems: selectCartItems,\n  total: selectCartTotal,\n  itemCount: selectCartItemsCount,\n});\n\n\nconst StripeCheckoutButton = (props) => {\n\n  const { cartItems, total, itemCount } = useSelector(mapState);\n  \n  const dispatch = useDispatch();\n  const configOrder={\n    orderTotal:total,\n    orderItems: cartItems.map(item => {\n      const { documentID, productThumbnail, productName,\n        productPrice, quantity } = item;\n\n        return {\n          documentID,\n          productThumbnail,\n          productName,\n          productPrice,\n          quantity\n        }\n      })\n\n  }\n\n\n\n\n  \n  // const sendMail=(e)=>{\n  //   emailjs.sendForm('service_xnzrgv2','template_6poiomb',\"user_vZEPRIeB2GfTHO8K2KJjb\").then(res=>{\n  //     console.log(res);\n  //   }).catch(err=>console.log(err))\n  // }\n  // const { currentUser } = useSelector(mapState);\n\n  // const { email } = currentUser;\n  // const dispatch = useDispatch()\n  const history = useHistory()\n  const notify =()=>{\n    toast.success('Order Succesfull')\n  } \n\n  //  const priceForStripe = price * 100;\n   const publishableKey = 'pk_test_KzWXSJxJu3foClpqvGjmUlnp00c4Xcfgbb';\n   \n   const onToken = token => {\n    history.push('/dashboard')\n    dispatch(clearCart())\n    // dispatch(sendMail(email))\n    dispatch(saveOrderHistory(configOrder))\n    dispatch(notify())\n    \n   };\n  //  const mapState = createStructuredSelector({\n  //     cartItems: selectCartItems,\n  //     total: selectCartTotal\n  //   });\n \n   return (\n      \n     <StripeCheckout\n       label='Pay with ðŸ’³'\n       name='FoodStore Ltd.'\n      \n       billingAddress\n       shippingAddress\n      image='https://scontent-tir2-1.xx.fbcdn.net/v/t1.6435-9/171289109_121223046724368_981274772739343386_n.jpg?_nc_cat=101&ccb=1-5&_nc_sid=973b4a&_nc_ohc=481g9-mrx4oAX-lWjiN&_nc_ht=scontent-tir2-1.xx&oh=da8c8805bf5288f037923ab30546a366&oe=61BF5982'\n       description={`Secure Payment with Stripe`}\n       panelLabel='Pay now'\n      //  amount={priceForStripe}\n       token={onToken}\n       stripeKey={publishableKey}\n\n         />\n\n         \n   );\n };\n \n//  const mapDispatchToProps = dispatch => ({\n//    resetCart: () => dispatch(resetCartAction()),\n//    push: route => dispatch(push(route))\n//  });\n \n export default (StripeCheckoutButton);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n// import FormInput from './../forms/FormInput';\n// import Button from './../forms/Button';\n// import { CountryDropdown } from 'react-country-region-selector';\n// import { apiInstance } from './../../Utils';\n// import { selectCartTotal, selectCartItemsCount, selectCartItems } from './../../redux/Cart/cart.selectors';\n// import { saveOrderHistory } from './../../redux/Orders/orders.actions';\n// import { clearCart } from './../../redux/Cart/cart.actions';\n// import { createStructuredSelector } from 'reselect';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useHistory } from 'react-router-dom';\n// import './styles.scss';\n// const initialAddressState = {\n//   line1: '',\n//   line2: '',\n//   city: '',\n//   state: '',\n//   postal_code: '',\n//   country: '',\n// };\n// const mapState = createStructuredSelector({\n//   total: selectCartTotal,\n//   itemCount: selectCartItemsCount,\n//   cartItems: selectCartItems,\n// });\n// const PaymentDetails = () => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const history = useHistory();\n//   const { total, itemCount, cartItems } = useSelector(mapState);\n//   const dispatch = useDispatch();\n//   const [billingAddress, setBillingAddress] = useState({ ...initialAddressState });\n//   const [shippingAddress, setShippingAddress] = useState({ ...initialAddressState });\n//   const [recipientName, setRecipientName] = useState('');\n//   const [nameOnCard, setNameOnCard] = useState('');\n//   useEffect(() => {\n//     if (itemCount < 1) {\n//       history.push('/dashboard');\n//     }\n//   }, [itemCount]);\n//   const handleShipping = evt => {\n//     const { name, value } = evt.target;\n//     setShippingAddress({\n//       ...shippingAddress,\n//       [name]: value\n//     });\n//   };\n//   const handleBilling = evt => {\n//     const { name, value } = evt.target;\n//     setBillingAddress({\n//       ...billingAddress,\n//       [name]: value\n//     });\n//   }\n//   const handleFormSubmit = async evt => {\n//     evt.preventDefault();\n//     const cardElement = elements.getElement('card');\n//     if (\n//       !shippingAddress.line1 || !shippingAddress.city ||\n//       !shippingAddress.state || !shippingAddress.postal_code ||\n//       !shippingAddress.country || !billingAddress.line1 ||\n//       !billingAddress.city || !billingAddress.state ||\n//       !billingAddress.postal_code || !billingAddress.country ||\n//       !recipientName || !nameOnCard\n//     ) {\n//       return;\n//     }\n//     apiInstance.post('/payments/create', {\n//       amount: total * 100,\n//       shipping: {\n//         name: recipientName,\n//         address: {\n//           ...shippingAddress\n//         }\n//       }\n//     }).then(({ data: clientSecret }) => {\n//       stripe.createPaymentMethod({\n//         type: 'card',\n//         card: cardElement,\n//         billing_details: {\n//           name: nameOnCard,\n//           address: {\n//             ...billingAddress\n//           }\n//         }\n//       }).then(({ paymentMethod }) => {\n//         stripe.confirmCardPayment(clientSecret, {\n//           payment_method: paymentMethod.id\n//         })\n//         .then(({ paymentIntent }) => {\n//           const configOrder = {\n//             orderTotal: total,\n//             orderItems: cartItems.map(item => {\n//               const { documentID, productThumbnail, productName,\n//                 productPrice, quantity } = item;\n//               return {\n//                 documentID,\n//                 productThumbnail,\n//                 productName,\n//                 productPrice,\n//                 quantity\n//               };\n//             })\n//           }\n//           dispatch(\n//             saveOrderHistory(configOrder)\n//           );\n//         });\n//       })\n//     });\n//   };\n//   const configCardElement = {\n//     iconStyle: 'solid',\n//     style: {\n//       base: {\n//         fontSize: '16px'\n//       }\n//     },\n//     hidePostalCode: true\n//   };\n//   return (\n//     <div className=\"paymentDetails\">\n//       <form onSubmit={handleFormSubmit}>\n//         <div className=\"group\">\n//           <h2>\n//             Shipping Address\n//           </h2>\n//           <FormInput\n//             required\n//             placeholder=\"Recipient Name\"\n//             name=\"recipientName\"\n//             handleChange={evt => setRecipientName(evt.target.value)}\n//             value={recipientName}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"Line 1\"\n//             name=\"line1\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.line1}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             placeholder=\"Line 2\"\n//             name=\"line2\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.line2}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"City\"\n//             name=\"city\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.city}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"State\"\n//             name=\"state\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.state}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"Postal Code\"\n//             name=\"postal_code\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.postal_code}\n//             type=\"text\"\n//           />\n//           <div className=\"formRow checkoutInput\">\n//             <CountryDropdown\n//               required\n//               onChange={val => handleShipping({\n//                 target: {\n//                   name: 'country',\n//                   value: val\n//                 }\n//               })}\n//               value={shippingAddress.country}\n//               valueType=\"short\"\n//             />\n//           </div>\n//         </div>\n//         <div className=\"group\">\n//           <h2>\n//             Billing Address\n//           </h2>\n//           <FormInput\n//             required\n//             placeholder=\"Name on Card\"\n//             name=\"nameOnCard\"\n//             handleChange={evt => setNameOnCard(evt.target.value)}\n//             value={nameOnCard}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"Line 1\"\n//             name=\"line1\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.line1}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             placeholder=\"Line 2\"\n//             name=\"line2\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.line2}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"City\"\n//             name=\"city\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.city}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"State\"\n//             name=\"state\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.state}\n//             type=\"text\"\n//           />\n//           <FormInput\n//             required\n//             placeholder=\"Postal Code\"\n//             name=\"postal_code\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.postal_code}\n//             type=\"text\"\n//           />\n//           <div className=\"formRow checkoutInput\">\n//             <CountryDropdown\n//               required\n//               onChange={val => handleBilling({\n//                 target: {\n//                   name: 'country',\n//                   value: val\n//                 }\n//               })}\n//               value={billingAddress.country}\n//               valueType=\"short\"\n//             />\n//           </div>\n//         </div>\n//         <div className=\"group\">\n//           <h2>\n//             Card Details\n//           </h2>\n//           <CardElement\n//             options={configCardElement}\n//           />\n//         </div>\n//         <Button\n//           type=\"submit\"\n//         >\n//           Pay Now\n//         </Button>\n//       </form>\n//     </div>\n//   );\n// }\n// export default PaymentDetails;","map":{"version":3,"sources":["C:/Users/HP/OneDrive/Desktop/Task-2-Ecommerce/src/components/PaymentDetails/index.js"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { CardElement, useStripe, useElements } from '@stripe/react-stripe-js';\n// import FormInput from './../forms/FormInput';\n// import Button from './../forms/Button';\n// import { CountryDropdown } from 'react-country-region-selector';\n// import { apiInstance } from './../../Utils';\n// import { selectCartTotal, selectCartItemsCount, selectCartItems } from './../../redux/Cart/cart.selectors';\n// import { saveOrderHistory } from './../../redux/Orders/orders.actions';\n// import { clearCart } from './../../redux/Cart/cart.actions';\n// import { createStructuredSelector } from 'reselect';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { useHistory } from 'react-router-dom';\n// import './styles.scss';\n\n// const initialAddressState = {\n//   line1: '',\n//   line2: '',\n//   city: '',\n//   state: '',\n//   postal_code: '',\n//   country: '',\n// };\n\n// const mapState = createStructuredSelector({\n//   total: selectCartTotal,\n//   itemCount: selectCartItemsCount,\n//   cartItems: selectCartItems,\n// });\n\n// const PaymentDetails = () => {\n//   const stripe = useStripe();\n//   const elements = useElements();\n//   const history = useHistory();\n//   const { total, itemCount, cartItems } = useSelector(mapState);\n//   const dispatch = useDispatch();\n//   const [billingAddress, setBillingAddress] = useState({ ...initialAddressState });\n//   const [shippingAddress, setShippingAddress] = useState({ ...initialAddressState });\n//   const [recipientName, setRecipientName] = useState('');\n//   const [nameOnCard, setNameOnCard] = useState('');\n\n//   useEffect(() => {\n//     if (itemCount < 1) {\n//       history.push('/dashboard');\n//     }\n\n//   }, [itemCount]);\n\n//   const handleShipping = evt => {\n//     const { name, value } = evt.target;\n//     setShippingAddress({\n//       ...shippingAddress,\n//       [name]: value\n//     });\n//   };\n\n//   const handleBilling = evt => {\n//     const { name, value } = evt.target;\n//     setBillingAddress({\n//       ...billingAddress,\n//       [name]: value\n//     });\n//   }\n\n//   const handleFormSubmit = async evt => {\n//     evt.preventDefault();\n//     const cardElement = elements.getElement('card');\n\n//     if (\n//       !shippingAddress.line1 || !shippingAddress.city ||\n//       !shippingAddress.state || !shippingAddress.postal_code ||\n//       !shippingAddress.country || !billingAddress.line1 ||\n//       !billingAddress.city || !billingAddress.state ||\n//       !billingAddress.postal_code || !billingAddress.country ||\n//       !recipientName || !nameOnCard\n//     ) {\n//       return;\n//     }\n\n//     apiInstance.post('/payments/create', {\n//       amount: total * 100,\n//       shipping: {\n//         name: recipientName,\n//         address: {\n//           ...shippingAddress\n//         }\n//       }\n//     }).then(({ data: clientSecret }) => {\n\n//       stripe.createPaymentMethod({\n//         type: 'card',\n//         card: cardElement,\n//         billing_details: {\n//           name: nameOnCard,\n//           address: {\n//             ...billingAddress\n//           }\n//         }\n//       }).then(({ paymentMethod }) => {\n\n//         stripe.confirmCardPayment(clientSecret, {\n//           payment_method: paymentMethod.id\n//         })\n//         .then(({ paymentIntent }) => {\n\n//           const configOrder = {\n//             orderTotal: total,\n//             orderItems: cartItems.map(item => {\n//               const { documentID, productThumbnail, productName,\n//                 productPrice, quantity } = item;\n\n//               return {\n//                 documentID,\n//                 productThumbnail,\n//                 productName,\n//                 productPrice,\n//                 quantity\n//               };\n//             })\n//           }\n\n//           dispatch(\n//             saveOrderHistory(configOrder)\n//           );\n//         });\n\n//       })\n\n\n//     });\n\n//   };\n\n//   const configCardElement = {\n//     iconStyle: 'solid',\n//     style: {\n//       base: {\n//         fontSize: '16px'\n//       }\n//     },\n//     hidePostalCode: true\n//   };\n\n//   return (\n//     <div className=\"paymentDetails\">\n//       <form onSubmit={handleFormSubmit}>\n\n//         <div className=\"group\">\n//           <h2>\n//             Shipping Address\n//           </h2>\n\n//           <FormInput\n//             required\n//             placeholder=\"Recipient Name\"\n//             name=\"recipientName\"\n//             handleChange={evt => setRecipientName(evt.target.value)}\n//             value={recipientName}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"Line 1\"\n//             name=\"line1\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.line1}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             placeholder=\"Line 2\"\n//             name=\"line2\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.line2}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"City\"\n//             name=\"city\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.city}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"State\"\n//             name=\"state\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.state}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"Postal Code\"\n//             name=\"postal_code\"\n//             handleChange={evt => handleShipping(evt)}\n//             value={shippingAddress.postal_code}\n//             type=\"text\"\n//           />\n\n//           <div className=\"formRow checkoutInput\">\n//             <CountryDropdown\n//               required\n//               onChange={val => handleShipping({\n//                 target: {\n//                   name: 'country',\n//                   value: val\n//                 }\n//               })}\n//               value={shippingAddress.country}\n//               valueType=\"short\"\n//             />\n//           </div>\n\n//         </div>\n\n//         <div className=\"group\">\n//           <h2>\n//             Billing Address\n//           </h2>\n\n//           <FormInput\n//             required\n//             placeholder=\"Name on Card\"\n//             name=\"nameOnCard\"\n//             handleChange={evt => setNameOnCard(evt.target.value)}\n//             value={nameOnCard}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"Line 1\"\n//             name=\"line1\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.line1}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             placeholder=\"Line 2\"\n//             name=\"line2\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.line2}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"City\"\n//             name=\"city\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.city}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"State\"\n//             name=\"state\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.state}\n//             type=\"text\"\n//           />\n\n//           <FormInput\n//             required\n//             placeholder=\"Postal Code\"\n//             name=\"postal_code\"\n//             handleChange={evt => handleBilling(evt)}\n//             value={billingAddress.postal_code}\n//             type=\"text\"\n//           />\n\n//           <div className=\"formRow checkoutInput\">\n//             <CountryDropdown\n//               required\n//               onChange={val => handleBilling({\n//                 target: {\n//                   name: 'country',\n//                   value: val\n//                 }\n//               })}\n//               value={billingAddress.country}\n//               valueType=\"short\"\n//             />\n//           </div>\n\n//         </div>\n\n//         <div className=\"group\">\n//           <h2>\n//             Card Details\n//           </h2>\n\n//           <CardElement\n//             options={configCardElement}\n//           />\n//         </div>\n\n//         <Button\n//           type=\"submit\"\n//         >\n//           Pay Now\n//         </Button>\n\n//       </form>\n//     </div>\n//   );\n// }\n\n// export default PaymentDetails;\n"]},"metadata":{},"sourceType":"module"}